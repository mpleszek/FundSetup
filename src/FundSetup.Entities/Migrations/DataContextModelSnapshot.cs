// <auto-generated />
using System;
using FundSetup.Entities.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FundSetup.Entities.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FundSetup.Entities.Models.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AttributeGroupId")
                        .HasColumnType("int");

                    b.Property<string>("AttributeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Internal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidationRule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeGroupId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.AttributeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("GroupOwnerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBase")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastChangedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupOwnerId");

                    b.ToTable("AttributeGroups");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.AttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<int?>("FundId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PreviousValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductSeriesId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("FundId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductSeriesId");

                    b.ToTable("AttributeValues");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.AttributeValueAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastChangedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AttributeValueAudit");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.Fund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("ChangeDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FundGroupId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastChangedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NotificationSentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FundGroupId");

                    b.ToTable("Fund");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.FundGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("FungGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastChangedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FundGroup");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.GroupOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ADGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastChangedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GroupOwner");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.ProcessInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CleanUpAfterDays")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastChangedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProcessInfo");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.ProcessReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastChangedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessInfoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReferenceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProcessInfoId");

                    b.ToTable("ProcessReport");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.ProductSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SeriesId");

                    b.ToTable("ProductSeries");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Column")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastChangedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedServerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Server");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.StaticFieldInfo", b =>
                {
                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("StaticFieldInfo");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.SystemConfiguration", b =>
                {
                    b.Property<bool?>("AllowConfigInGenericUI")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsXmlContent")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastChangedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidationExpression")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("SystemConfiguration");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.Attribute", b =>
                {
                    b.HasOne("FundSetup.Entities.Models.AttributeGroup", null)
                        .WithMany("Attributes")
                        .HasForeignKey("AttributeGroupId");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.AttributeGroup", b =>
                {
                    b.HasOne("FundSetup.Entities.Models.GroupOwner", null)
                        .WithMany("AttributeGroups")
                        .HasForeignKey("GroupOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FundSetup.Entities.Models.AttributeValue", b =>
                {
                    b.HasOne("FundSetup.Entities.Models.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FundSetup.Entities.Models.Fund", null)
                        .WithMany("AttributeValues")
                        .HasForeignKey("FundId");

                    b.HasOne("FundSetup.Entities.Models.Product", null)
                        .WithMany("AttributeValues")
                        .HasForeignKey("ProductId");

                    b.HasOne("FundSetup.Entities.Models.ProductSeries", null)
                        .WithMany("AttributeValues")
                        .HasForeignKey("ProductSeriesId");

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.Fund", b =>
                {
                    b.HasOne("FundSetup.Entities.Models.FundGroup", null)
                        .WithMany("Funds")
                        .HasForeignKey("FundGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FundSetup.Entities.Models.ProcessReport", b =>
                {
                    b.HasOne("FundSetup.Entities.Models.ProcessInfo", "ProcessInfo")
                        .WithMany("ProcessReport")
                        .HasForeignKey("ProcessInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessInfo");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.ProductSeries", b =>
                {
                    b.HasOne("FundSetup.Entities.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FundSetup.Entities.Models.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.AttributeGroup", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.Fund", b =>
                {
                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.FundGroup", b =>
                {
                    b.Navigation("Funds");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.GroupOwner", b =>
                {
                    b.Navigation("AttributeGroups");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.ProcessInfo", b =>
                {
                    b.Navigation("ProcessReport");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.Product", b =>
                {
                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("FundSetup.Entities.Models.ProductSeries", b =>
                {
                    b.Navigation("AttributeValues");
                });
#pragma warning restore 612, 618
        }
    }
}
